#Types
Types == classes
int t1; #well-typed
t2; #not well-typed

safety = progress + preservation
term is well-typed if it has a type
progress means if term is well-typed it is not stuck
preservation means if term is well-typed then its derivations will be well-typed,
e.g. t1 -> t2. if t1 is well-typed, then t2 is also well-typed

#c++
int f1(int x){
    return x;
}

#typed lambda calc
f1 = lambda x:Int. x

type of f1 is Int -> Int
it means that it takes Int and return Int

t1 = f1 (f1 3)
t1 is of type Int, it is well-typed

t2 = f1 (f1 True)
t2 is not well-typed, because True is not Int

iszero is of type Nat->Bool
pred is of type Nat -> Nat

f = lambda x:Nat. lambda y:Bool. x
f is of type (Nat -> (Bool -> Nat))

#Context
Г, z:Nat |-- f2 = lambda x:Nat. lambda y:Bool. z
Since we know type of, type of f2 is (Nat -> (Bool -> Nat))

#how to define type of if term
#arms must be of the same type, otherwise term is not well-typed
t1 = if true then 1 else 2
#type of t1 is Nat

t2 = if true then 1 else false
#t2 is not well-typed

t3 = if true then (if false then false else false) else (if true then 1 else 2)
#t3 is not well-typed.

#QUIZ 2.2

1. lambda x: Nat. lambda y: Nat -> Nat.
                    if iszero(y 1) then iszero(x) else (plus x (y 0))

    iszero(y 1): Bool
        iszero: Nat -> Bool
            (y 1): Nat
                y: Nat -> Nat
                1: Nat
    #Guard is bool -> ok

    iszero(x): Bool

    plus x (y 0): Nat
#Arms have different types, whole expression is wrong

2. f:Bool -> Nat, x:Nat |-- lambda x: Bool. f (if x then false else x) 
    
    (lambda x: Bool. f (if x then false else x)): Bool -> Nat
        if x then false else x: Bool
        (f (if x then false else x)): Nat

#Need to find context
3. lambda x: Nat. if (f x) then (iszero(succ z)) else (lambda z: Nat. iszero z)
        f: Nat -> Bool
        z: Nat #e.g z is 1

#QUIZ 2.1
def f1(int x):
    def f2(int->int y):
        if ......

1. lambda x: Nat. lambda y: Nat -> Nat.
                    if (iszero (y 1)) then (plus x (y 0)) else x
            (iszero (y 1)): Bool
            (plus x (y 0)): Nat
            x: Nat

    Ans: Nat -> ((Nat -> Nat) -> Nat)

2. f: Bool -> Bool |-- lambda x:Bool. f (if x then false else false)
    (if x then false else false): Bool
    f (if x then false else false): Bool
    Ans: Bool -> Bool

#Find context, so that term is well-typed
3. lambda x: Nat.
        if (f x) then (succ x) else ((f y) 4 0)
        f: Nat -> Bool or Nat -> (Nat -> (Nat -> Nat)) #This is contradiction!!!
        y: Nat

        Ans: There is no correct context!

4.Suppose we are using simply typed lambda calculus enriched with Nat and Bool (λNB).
Let t → s and s:T. Does it imply that t:T? Yes
iszero(2) -> False